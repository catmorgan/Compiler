/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Parser;

import lexicalanalyzer.*;

/**
 *
 * @author Cat Morgan
 */
public class ParseTable {

    //makes a 2D array
    int[][] parseTable;

    //calls to initialize the pars table
    public ParseTable() {
        init();
    }

    //initializes the parse table to be defined by the given parse table
    public void init() {
        parseTable = new int[][]{
            {1, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 2, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999},
            {999, -6, 999, 5, -6, -6, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999},
            {999, -16, 999, 999, 15, 15, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999},
            {999, 25, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 3, 999, -4, -4, 999,
                999, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 7, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 10, 10, 11, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999},
            {999, -9, 999, 999, -9, -9, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 8, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 12, 13, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 999, 999, 14, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 17, 17, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 18, 19, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, -21, -21, 999,
                20, 999, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 22, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 23, 999, -24,
                999, 999, 999, 999, 999, 999, 999},
            {999, 26, 999, 999, 999, 999, 999, 999, 999, 999, 999, 26, 999, 999,
                26, 999, 999, 26, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999},
            {999, 29, 999, 999, 999, 999, 999, 999, 999, 999, 999, 30, 999, 999,
                31, 999, 999, 29, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999},
            {999, 999, -28, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 27, 999, 999,
                999, 999, 999, 999, 999, 999, 999},
            {999, 35, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 34, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 45, 45, 45, 45, 999, 999, 999, 999, 999, 999, 999, 999, 45,
                999, 999, 45, 45, 999, 999},
            {999, 999, 33, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 32,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 33, 999, 999,
                999, 999, 999, 999, 999, 999, 999},
            {999, 999, 37, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 37,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 36, 999, 37, 999, 999, 37,
                999, 36, 999, 999, 999, 999},
            {999, 999, 39, 999, 999, 999, 999, 999, 999, 999, 999, 999, 39, 39, 999,
                39, 999, 999, 999, 999, 39, 39, 39, 39, 39, 39, 999, 39, 999, 39, 38,
                999, 999, 999, 999},
            {999, 999, 41, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 41,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 41, 999, 999,
                40, 999, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 42, 42, 42, 42, 999, 999, 999, 999, 999, 999, 999, 999, 42,
                999, 999, 42, 42, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 43, 999, 999, -44,
                999, 999, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 48, 48, 48, 48, 999, 999, 999, 999, 999, 999, 999, 999, 48,
                999, 999, 49, 49, 999, 999},
            {999, 999, -47, 999, 999, 999, 999, 999, 999, 999, 999, 999, -47, -47,
                999, -47, 999, 999, 999, 999, 46, 999, 999, 999, -47, -47, 999,
                -47, 999, -47, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 52, 52, 52, 52, 999, 999, 999, 999, 999, 999, 999,
                999, 52, 999, 999, 999, 999, 999, 999},
            {999, 999, -51, 999, 999, 999, 999, 999, 999, 999, 999, 999, -51, -51,
                999, -51, 999, 999, 999, 999, -51, 999, 50, 999, -51, -51, 999,
                -51, 999, -51, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 64, 63, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 58, 55, 56, 56, 999, 999, 999, 999, 999, 999, 999, 999,
                57, 999, 999, 999, 999, 999, 999},
            {999, 999, -54, 999, 999, 999, 999, 999, 999, 999, 999, 999, -54, -54,
                999, -54, 999, 999, 999, 999, -54, 53, -54, 999, -54, -54, 999, -54,
                999, -54, 999, 999, 999, 999, 999},
            {999, 999, 60, 999, 999, 999, 999, 999, 999, 999, 999, 999, 60, 60, 999,
                60, 999, 999, 999, 999, 60, 60, 60, 999, 60, 60, 999, 60, 59, 60,
                60, 999, 999, 999, 999},
            {999, 999, 62, 999, 999, 999, 999, 999, 999, 999, 999, 999, 62, 62, 999,
                62, 999, 999, 999, 999, 62, 62, 62, 999, 62, 62, 999, 62, 61, 62,
                999, 999, 999, 999, 999},
            {65, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999, 999},
            {999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 66, 67, 999, 999, 999, 999, 999, 999, 999, 999,
                999, 999, 999, 999, 999, 999, 999}
        };
    }

   /**
    * @param predicted, the predicted GrammarSymbol from the stack indicated 
    * by its number association
    * @param token, the current token from the lexical analyzer indicated 
    * by its number association
    * @return the integer in the position [predicted, token]
    */
    public int search(int predicted, int token) {
        return parseTable[predicted][token];
    }
}
